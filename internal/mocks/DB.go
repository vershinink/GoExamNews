// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	storage "GoNews/internal/storage"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// AddPosts provides a mock function with given fields: ctx, posts
func (_m *DB) AddPosts(ctx context.Context, posts <-chan storage.Post) (int, error) {
	ret := _m.Called(ctx, posts)

	if len(ret) == 0 {
		panic("no return value specified for AddPosts")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, <-chan storage.Post) (int, error)); ok {
		return rf(ctx, posts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, <-chan storage.Post) int); ok {
		r0 = rf(ctx, posts)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, <-chan storage.Post) error); ok {
		r1 = rf(ctx, posts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Posts provides a mock function with given fields: ctx, n
func (_m *DB) Posts(ctx context.Context, n int) ([]storage.Post, error) {
	ret := _m.Called(ctx, n)

	if len(ret) == 0 {
		panic("no return value specified for Posts")
	}

	var r0 []storage.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]storage.Post, error)); ok {
		return rf(ctx, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []storage.Post); ok {
		r0 = rf(ctx, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
